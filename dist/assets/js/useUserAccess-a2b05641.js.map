{"version":3,"file":"useUserAccess-a2b05641.js","sources":["../../../src/hooks/useUserAccess.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { supabase } from '../services/supabase';\n\ninterface UserAccess {\n  accessTier: 'free' | 'pro' | null;\n  subscriptionId: string | null;\n  planInterval: 'monthly' | 'yearly' | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport const useUserAccess = (): UserAccess => {\n  const { user } = useAuth();\n  const [accessTier, setAccessTier] = useState<'free' | 'pro' | null>(null);\n  const [subscriptionId, setSubscriptionId] = useState<string | null>(null);\n  const [planInterval, setPlanInterval] = useState<'monthly' | 'yearly' | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchUserAccess = async () => {\n      if (!user) {\n        setAccessTier(null);\n        setSubscriptionId(null);\n        setPlanInterval(null);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const { data, error: fetchError } = await supabase\n          .from('users')\n          .select('access_tier, subscription_id, plan_interval')\n          .eq('id', user.id)\n          .single();\n\n        if (fetchError) {\n          setError(fetchError.message);\n          setAccessTier('free');\n        } else {\n          setAccessTier(data?.access_tier || 'free');\n          setSubscriptionId(data?.subscription_id || null);\n          setPlanInterval(data?.plan_interval || null);\n        }\n      } catch (err) {\n        setError('Failed to fetch user access');\n        setAccessTier('free');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserAccess();\n  }, [user]);\n\n  return {\n    accessTier,\n    subscriptionId,\n    planInterval,\n    loading,\n    error\n  };\n}; "],"names":["useUserAccess","user","useAuth","accessTier","setAccessTier","useState","subscriptionId","setSubscriptionId","planInterval","setPlanInterval","loading","setLoading","error","setError","useEffect","async","data","fetchError","supabase","from","select","eq","id","single","message","access_tier","subscription_id","plan_interval","err","fetchUserAccess"],"mappings":"wFAYO,MAAMA,EAAgB,KACrB,MAAAC,KAAEA,GAASC,KACVC,EAAYC,GAAiBC,WAAgC,OAC7DC,EAAgBC,GAAqBF,WAAwB,OAC7DG,EAAcC,GAAmBJ,WAAsC,OACvEK,EAASC,GAAcN,YAAS,IAChCO,EAAOC,GAAYR,WAAwB,MAyC3C,OAvCPS,EAAAA,UAAU,KACgBC,WACtB,IAAKd,EAKH,OAJAG,EAAc,MACdG,EAAkB,MAClBE,EAAgB,WAChBE,GAAW,GAIT,IACFA,GAAW,GACXE,EAAS,MAET,MAAMG,KAAEA,EAAMJ,MAAOK,SAAqBC,EACvCC,KAAK,SACLC,OAAO,+CACPC,GAAG,KAAMpB,EAAKqB,IACdC,SAECN,GACFJ,EAASI,EAAWO,SACpBpB,EAAc,UAEAA,EAAAY,GAAMS,aAAe,QACjBlB,EAAAS,GAAMU,iBAAmB,MAC3BjB,EAAAO,GAAMW,eAAiB,aAElCC,GACPf,EAAS,+BACTT,EAAc,OAAM,CACpB,QACAO,GAAW,EACb,GAGckB,IACf,CAAC5B,IAEG,CACLE,aACAG,iBACAE,eACAE,UACAE"}