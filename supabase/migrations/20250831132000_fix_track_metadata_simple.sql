-- Migration: Fix Track Metadata (Simple Version)
-- Description: Update track_id, name, and artist fields based on file_key patterns
-- Date: 2025-08-31
-- Status: SAFE - Non-destructive updates only

-- Step 1: Create a simple function to extract track_id from file_key
CREATE OR REPLACE FUNCTION extract_track_id_from_file_key(file_key TEXT)
RETURNS TEXT AS $$
DECLARE
    filename TEXT;
    parts TEXT[];
    i INTEGER;
    track_id TEXT;
BEGIN
    -- Handle null or empty file_key
    IF file_key IS NULL OR file_key = '' THEN
        RETURN NULL;
    END IF;
    
    -- Get filename from path
    filename := split_part(file_key, '/', -1);
    
    -- Remove file extension
    filename := split_part(filename, '.', 1);
    
    -- Split by '-' to find the hash
    parts := string_to_array(filename, '-');
    track_id := '';
    
    -- Build track_id by stopping before the 10-character hash
    FOR i IN 1..array_length(parts, 1) LOOP
        -- Check if this part is a 10-character hex hash
        IF length(parts[i]) = 10 AND parts[i] ~ '^[a-f0-9]+$' THEN
            -- Found the hash, stop here
            EXIT;
        ELSE
            -- This is part of the track_id
            IF track_id = '' THEN
                track_id := parts[i];
            ELSE
                track_id := track_id || '-' || parts[i];
            END IF;
        END IF;
    END LOOP;
    
    RETURN track_id;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Step 2: Create a simple function to format track name
CREATE OR REPLACE FUNCTION format_track_name(track_id TEXT)
RETURNS TEXT AS $$
DECLARE
    parts TEXT[];
    i INTEGER;
    part TEXT;
    formatted_name TEXT;
BEGIN
    -- Handle null or empty track_id
    IF track_id IS NULL OR track_id = '' THEN
        RETURN NULL;
    END IF;
    
    -- Split by hyphens
    parts := string_to_array(track_id, '-');
    formatted_name := '';
    
    -- Process each part
    FOR i IN 1..array_length(parts, 1) LOOP
        part := parts[i];
        
        -- Skip empty parts
        IF part = '' THEN
            CONTINUE;
        END IF;
        
        -- Handle version and alternate keywords
        IF part = 'version' THEN
            formatted_name := formatted_name || ' - Version ';
            CONTINUE;
        ELSIF part = 'alt' THEN
            formatted_name := formatted_name || ' - Alternate ';
            CONTINUE;
        END IF;
        
        -- Capitalize first letter
        part := upper(substring(part, 1, 1)) || lower(substring(part, 2));
        
        -- Add to formatted name
        IF formatted_name = '' THEN
            formatted_name := part;
        ELSE
            formatted_name := formatted_name || ' ' || part;
        END IF;
    END LOOP;
    
    RETURN formatted_name;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Step 3: Update all tracks with proper metadata
UPDATE public.library_tracks 
SET 
    track_id = extract_track_id_from_file_key(file_key),
    name = format_track_name(extract_track_id_from_file_key(file_key)),
    artist = 'Generated by Audafact',
    updated_at = NOW()
WHERE file_key IS NOT NULL AND file_key != '';

-- Step 4: Grant permissions to the functions
GRANT EXECUTE ON FUNCTION extract_track_id_from_file_key(TEXT) TO anon;
GRANT EXECUTE ON FUNCTION extract_track_id_from_file_key(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION extract_track_id_from_file_key(TEXT) TO service_role;

GRANT EXECUTE ON FUNCTION format_track_name(TEXT) TO anon;
GRANT EXECUTE ON FUNCTION format_track_name(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION format_track_name(TEXT) TO service_role;
